"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CardChartJS;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _chart = require("chart.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

_chart.Chart.register.apply(_chart.Chart, _toConsumableArray(_chart.registerables));

function CardChartJS(_ref) {
  var title = _ref.title,
      subtitle = _ref.subtitle,
      color = _ref.color,
      chart = _ref.chart,
      children = _ref.children;

  var chartRef = _react.default.useRef(null);

  _react.default.useEffect(function () {
    var ctx = chartRef.current.getContext("2d");
    var newChart = new _chart.Chart(ctx, chart);
    return function cleanup() {
      newChart.destroy();
    };
  }, [chart]);

  var cardColors = {
    white: "bg-white",
    light: "bg-blueGray-200",
    blueGray: "bg-blueGray-800",
    red: "bg-red-900",
    orange: "bg-orange-900",
    amber: "bg-amber-900",
    emerald: "bg-emerald-900",
    teal: "bg-teal-900",
    lightBlue: "bg-lightBlue-900",
    indigo: "bg-indigo-900",
    purple: "bg-purple-900",
    pink: "bg-pink-900"
  };
  var subtitleColors = {
    white: "text-blueGray-500",
    light: "text-blueGray-500",
    blueGray: "text-blueGray-200",
    red: "text-blueGray-200",
    orange: "text-blueGray-200",
    amber: "text-blueGray-200",
    emerald: "text-blueGray-200",
    teal: "text-blueGray-200",
    lightBlue: "text-blueGray-200",
    indigo: "text-blueGray-200",
    purple: "text-blueGray-200",
    pink: "text-blueGray-200"
  };
  var titleColors = {
    white: "text-blueGray-800",
    light: "text-blueGray-800",
    blueGray: "text-white",
    red: "text-white",
    orange: "text-white",
    amber: "text-white",
    emerald: "text-white",
    teal: "text-white",
    lightBlue: "text-white",
    indigo: "text-white",
    purple: "text-white",
    pink: "text-white"
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "relative flex flex-col min-w-0 break-words w-full mb-8 shadow-lg rounded-lg " + cardColors[color]
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "rounded-t mb-0 px-4 py-3 bg-transparent"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "flex flex-wrap items-center"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "relative w-full max-w-full flex-grow flex-1"
  }, /*#__PURE__*/_react.default.createElement("h6", {
    className: "uppercase mb-1 text-xs font-semibold " + subtitleColors[color]
  }, subtitle), /*#__PURE__*/_react.default.createElement("h2", {
    className: "text-xl font-semibold " + titleColors[color]
  }, title)))), /*#__PURE__*/_react.default.createElement("div", {
    className: "p-4 flex-auto"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "relative h-350-px"
  }, /*#__PURE__*/_react.default.createElement("canvas", {
    ref: chartRef
  })))));
}

CardChartJS.defaultProps = {
  chart: {},
  color: "white",
  children: null
};
CardChartJS.propTypes = {
  title: _propTypes.default.string,
  subtitle: _propTypes.default.string,
  color: _propTypes.default.oneOf(["white", "light", "blueGray", "red", "orange", "amber", "emerald", "teal", "lightBlue", "indigo", "purple", "pink"]),
  // this is the chart config object
  // for more information, please check https://www.chartjs.org/?ref=creativetim
  chart: _propTypes.default.object,
  // this will appear at the bottom of the Table, for example,
  // you can use this to add a button that changes something inside the chart
  children: _propTypes.default.node
};
