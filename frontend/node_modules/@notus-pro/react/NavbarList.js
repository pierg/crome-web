"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Navbar;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Navbar(_ref) {
  var children = _ref.children,
      breakpoint = _ref.breakpoint,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ["children", "breakpoint", "className"]);

  var breakpoints = {
    all: "items-center flex-row",
    sm: "flex flex-col sm:items-center sm:flex-row",
    md: "flex flex-col md:items-center md:flex-row",
    lg: "flex flex-col lg:items-center lg:flex-row",
    xl: "flex flex-col xl:items-center xl:flex-row"
  };
  var classes = (0, _classnames.default)("flex flex-wrap list-none pl-0 mb-0 list-none pl-0 mb-0", breakpoints[breakpoint], className);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("ul", _extends({}, rest, {
    className: classes
  }), children));
}

Navbar.defaultProps = {
  className: ""
};
Navbar.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  // where the list should be inline alligned
  breakpoint: _propTypes.default.oneOf(["all", "sm", "md", "lg", "xl"])
};
