"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Incrementer;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("./Button.js"));

var _Input = _interopRequireDefault(require("./Input.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Incrementer(_ref) {
  var defaultValue = _ref.defaultValue,
      size = _ref.size,
      color = _ref.color,
      onChange = _ref.onChange,
      onMinus = _ref.onMinus,
      onPlus = _ref.onPlus,
      max = _ref.max,
      min = _ref.min,
      changeValue = _ref.changeValue;

  var _React$useState = _react.default.useState(defaultValue),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      inputValue = _React$useState2[0],
      setInputValue = _React$useState2[1];

  var decrement = function decrement() {
    onChange(inputValue - changeValue < min ? min : inputValue - changeValue);
    onMinus(inputValue - changeValue < min ? min : inputValue - changeValue);
    setInputValue(inputValue - changeValue < min ? min : inputValue - changeValue);
  };

  var increment = function increment() {
    onChange(inputValue + changeValue > max ? max : inputValue + changeValue);
    onPlus(inputValue + changeValue > max ? max : inputValue + changeValue);
    setInputValue(inputValue + changeValue > max ? max : inputValue + changeValue);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "relative inline-flex flex-row w-full items-stretch"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "mr-2"
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    color: color,
    size: size,
    onClick: decrement
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-minus"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: "mr-2"
  }, /*#__PURE__*/_react.default.createElement(_Input.default, {
    value: inputValue,
    onChange: function onChange() {},
    type: "text"
  })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    color: color,
    size: size,
    onClick: increment
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: "fas fa-plus"
  })))));
}

Incrementer.defaultProps = {
  onChange: function onChange() {},
  onMinus: function onMinus() {},
  onPlus: function onPlus() {},
  color: "orange",
  defaultValue: 0,
  min: -100,
  max: 100,
  changeValue: 1,
  size: "regular"
};
Incrementer.propTypes = {
  defaultValue: _propTypes.default.number,
  // the number with which the increment should increase
  // and the decrement should decrease
  changeValue: _propTypes.default.number,
  // what is the last number you can decrement to
  min: _propTypes.default.number,
  // what is the last number you can increment to
  max: _propTypes.default.number,
  size: _propTypes.default.oneOf(["sm", "lg", "regular"]),
  color: _propTypes.default.oneOf(["facebook", "twitter", "instagram", "github", "pinterest", "youtube", "vimeo", "slack", "dribbble", "reddit", "tumblr", "linkedin", "white", "light", "dark", "blueGray", "red", "orange", "amber", "emerald", "teal", "lightBlue", "indigo", "purple", "pink"]),
  // this function will be called for both
  // increment and decrement actions
  // Example of usage: onChange={(value) => console.log(value)}
  // the above example will show you the new value
  onChange: _propTypes.default.func,
  // this function will be called for
  // the decrement action
  // Example of usage: onMinus={(value) => console.log(value)}
  // the above example will show you the new value
  onMinus: _propTypes.default.func,
  // this function will be called for
  // the increment action
  // Example of usage: onMinus={(value) => console.log(value)}
  // the above example will show you the new value
  onPlus: _propTypes.default.func
};
