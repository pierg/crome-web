"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Input = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var border = _ref.border,
      size = _ref.size,
      leftIcon = _ref.leftIcon,
      rightIcon = _ref.rightIcon,
      type = _ref.type,
      rest = _objectWithoutProperties(_ref, ["border", "size", "leftIcon", "rightIcon", "type"]);

  var sizes = {
    sm: "px-2 py-2 text-sm ",
    lg: "px-3 py-3 text-sm ",
    regular: "px-3 py-2 text-sm "
  };
  var borders = {
    border: "border-blueGray-300",
    borderless: "border-transparent shadow"
  };
  var inputClasses = sizes[size] + " w-full placeholder-blueGray-200 text-blueGray-700 relative bg-white rounded-md outline-none focus:ring focus:ring-lightBlue-500 focus:ring-1 focus:border-lightBlue-500 border border-solid transition duration-200 ";
  inputClasses = borders[border] + " " + inputClasses;
  var leftAddon = null;
  var rightAddon = null;
  var wrapperClasses = "mb-3 pt-0";

  if (leftIcon) {
    inputClasses = inputClasses + "pl-10 ";
    wrapperClasses = "relative flex w-full flex-wrap items-stretch mb-3";
    leftAddon = /*#__PURE__*/_react.default.createElement("span", {
      className: "z-10 h-full flex absolute text-center text-blueGray-300 text-sm items-center w-8 pl-3"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: leftIcon
    }));
  }

  if (rightIcon) {
    inputClasses = inputClasses + "pr-10 ";
    wrapperClasses = "relative flex w-full flex-wrap items-stretch mb-3";
    rightAddon = /*#__PURE__*/_react.default.createElement("span", {
      className: "z-10 h-full flex absolute text-center text-blueGray-300 text-sm items-center w-8 right-0"
    }, /*#__PURE__*/_react.default.createElement("i", {
      className: rightIcon
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: wrapperClasses,
    ref: ref
  }, leftAddon, type && type === "textarea" ? /*#__PURE__*/_react.default.createElement("textarea", _extends({}, rest, {
    type: type,
    className: inputClasses
  })) : /*#__PURE__*/_react.default.createElement("input", _extends({}, rest, {
    type: type,
    className: inputClasses
  })), rightAddon));
});

Input.defaultProps = {
  border: "border",
  size: "regular"
};
Input.propTypes = {
  border: _propTypes.default.oneOf(["border", "borderless"]),
  size: _propTypes.default.oneOf(["sm", "lg", "regular"]),
  // NOTE: you sould only pass icon classes
  // // // if you also pass tailwindcss classes
  // // // the output may not be a desired one
  leftIcon: _propTypes.default.string,
  // NOTE: you sould only pass icon classes
  // // // if you also pass tailwindcss classes
  // // // the output may not be a desired one
  rightIcon: _propTypes.default.string
};
var _default = Input;
exports.default = _default;
